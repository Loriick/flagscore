name: Deploy to Production

on:
  push:
    branches: [main]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: "18"
  PNPM_VERSION: "8"

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NEXT_PUBLIC_VERCEL_URL: https://flagscore.fr
          NEXT_PUBLIC_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"
          working-directory: ./

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: "./lighthouse.config.js"
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              const results = JSON.parse(fs.readFileSync('.lighthouseci/assertion-results.json', 'utf8'));
              const comment = `## üöÄ Lighthouse Performance Report
              
              **Performance Score:** ${results[0]?.summary?.performance || 'N/A'}
              **Accessibility Score:** ${results[0]?.summary?.accessibility || 'N/A'}
              **Best Practices Score:** ${results[0]?.summary?.['best-practices'] || 'N/A'}
              **SEO Score:** ${results[0]?.summary?.seo || 'N/A'}
              
              [View detailed report](${process.env.LIGHTHOUSE_CI_REPORT_URL})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not create Lighthouse comment:', error);
            }

  # Job de tests post-d√©ploiement
  post-deploy-tests:
    name: Post-Deploy Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main'

    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Run smoke tests
        run: |
          curl -f https://flagscore.fr/robots.txt || exit 1
          curl -f https://flagscore.fr/sitemap.xml || exit 1
          echo "‚úÖ Basic endpoints are working"

      - name: Test API endpoints
        run: |
          # Test rate limiting
          curl -f "https://flagscore.fr/api/test-rate-limit" || echo "Rate limit test endpoint not available"

          # Test security headers
          curl -I https://flagscore.fr | grep -i "x-frame-options" || echo "Security headers check"

  # Job de notification de d√©ploiement
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy-tests]
    if: always()

    steps:
      - name: Notify successful deployment
        if: ${{ needs.deploy.result == 'success' && needs.post-deploy-tests.result == 'success' }}
        run: |
          echo "üéâ Deployment successful!"
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "URL: https://flagscore.fr"

      - name: Notify deployment failure
        if: ${{ needs.deploy.result == 'failure' || needs.post-deploy-tests.result == 'failure' }}
        run: |
          echo "‚ùå Deployment failed!"
          echo "Please check the logs for more details."
          exit 1
